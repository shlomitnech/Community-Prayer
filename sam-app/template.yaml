AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-app

  Sample SAM Template for sam-app

Globals:
  Function:
    Timeout: 3
  Api:
    Cors:
      AllowMethods: "'GET,POST,OPTIONS'"
      AllowHeaders: "'content-type'"
      AllowOrigin: "'*'"

Resources:
  NamesSubmittedTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: NamesSubmitted
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: "NamesID"
          AttributeType: "S"
        - AttributeName: "Email"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "NamesID"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        - IndexName: EmailIndex
          KeySchema:
            - AttributeName: Email
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  AllSubscribersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: AllSubscribers
      AttributeDefinitions:
        - AttributeName: SubscriberID
          AttributeType: S
        - AttributeName: Email
          AttributeType: S
      KeySchema:
        - AttributeName: SubscriberID
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: EmailIndex
          KeySchema:
            - AttributeName: Email
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  SubmitNameFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: submit_name/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:*
              Resource: !GetAtt NamesSubmittedTable.Arn
      Events:
        SubmitNameApi:
          Type: Api
          Properties:
            Path: /submit-name
            Method: post
            RestApiId: !Ref ServerlessRestApi
        SubmitNameOptions:
          Type: Api
          Properties:
            Path: /submit-name
            Method: options
            RestApiId: !Ref ServerlessRestApi

  ReadNamesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: read_names/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:*
              Resource:
                - !GetAtt NamesSubmittedTable.Arn
                - !Sub "${NamesSubmittedTable.Arn}/index/EmailIndex"
      Events:
        ReadNamesApi:
          Type: Api
          Properties:
            Path: /read-names
            Method: get   
            RestApiId: !Ref ServerlessRestApi


  UpdateNamesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: update_names/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:*
              Resource: !GetAtt NamesSubmittedTable.Arn
      Events:
        UpdateNamesApi:
          Type: Api
          Properties:
            Path: /update-names
            Method: any
            RestApiId: !Ref ServerlessRestApi
        UpdateNamesOptions:
          Type: Api
          Properties:
            Path: /update-names
            Method: options
            RestApiId: !Ref ServerlessRestApi

  DeleteNamesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: delete_names/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:DeleteItem
              Resource: 
                - !GetAtt NamesSubmittedTable.Arn
      Events:
        DeleteNamesApi:
          Type: Api
          Properties:
            Path: /delete-names
            Method: any
            RestApiId: !Ref ServerlessRestApi
        DeleteNamesOptions:
          Type: Api
          Properties:
            Path: /delete-names
            Method: options
            RestApiId: !Ref ServerlessRestApi

  ServerlessRestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: NamesAPI
      StageName: Prod
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
        Access-Control-Allow-Origin: '*'
        MaxAge: "'600'"
        AllowCredentials: true
      DefinitionBody:
        openapi: 3.0.1
        info:
          title: NamesAPI
        paths:
          /read-names:
            get:
            x-amazon-apigateway-integration:
              uri:
                !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ReadNamesFunction.Arn}/invocations"
              httpMethod: GET
              type: aws_proxy
            responses:
              '200':
                description: Successful GET request
                headers:
                  Access-Control-Allow-Origin:
                    schema:
                      type: string
                      example: '*'
          options:
            responses:
              '200':
                description: CORS preflight response
                headers:
                  Access-Control-Allow-Origin:
                    schema:
                      type: string
                      example: '*'
                  Access-Control-Allow-Methods:
                    schema:
                      type: string
                      example: GET,POST,OPTIONS
                  Access-Control-Allow-Headers:
                    schema:
                      type: string
                      example: Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token
            x-amazon-apigateway-integration:
              type: mock
              requestTemplates:
                application/json: '{"statusCode": 200}'            


Outputs:
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/" 
