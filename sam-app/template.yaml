AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-app

Globals:
  Function:
    Timeout: 10
    Runtime: python3.13
    Architectures:
      - arm64

Resources:
  NamesSubmittedTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: NamesSubmitted
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: "NamesID"
          AttributeType: "S"
        - AttributeName: "Email"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "NamesID"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        - IndexName: EmailIndex
          KeySchema:
            - AttributeName: Email
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  AllSubscribersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: AllSubscribers
      AttributeDefinitions:
        - AttributeName: SubscriberID
          AttributeType: S
        - AttributeName: Email
          AttributeType: S
      KeySchema:
        - AttributeName: SubscriberID
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        - IndexName: EmailIndex
          KeySchema:
            - AttributeName: Email
              KeyType: "HASH"
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  SubmitNameFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: submit_name/
      Handler: app.lambda_handler
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:*
              Resource: !GetAtt NamesSubmittedTable.Arn
      Events:
        SubmitNameApiEvent:
          Type: Api
          Properties:
            Path: /submit-name
            Method: post

  ReadNamesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: read_names/
      Handler: app.lambda_handler
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:*
              Resource:
              - !GetAtt NamesSubmittedTable.Arn
              - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/NamesSubmitted/index/EmailIndex
      Events:
        ReadNamesApiEvent:
          Type: Api
          Properties:
            Path: /read-names
            Method: any

  UpdateNamesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: update_names/
      Handler: app.lambda_handler
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:*
              Resource: !GetAtt NamesSubmittedTable.Arn
      Events:
        UpdateNamesApiEvent:
          Type: Api
          Properties:
            Path: /update-names
            Method: post

  DeleteNamesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: delete_names/
      Handler: app.lambda_handler
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:*
              Resource: !GetAtt NamesSubmittedTable.Arn
      Events:
        DeleteNamesApiEvent:
          Type: Api
          Properties:
            Path: /delete-names
            Method: post

  ServerlessRestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: NamesAPI
      StageName: Prod
      Description: API for managing names
      Cors:
        AllowOrigins:
          - "*"
        AllowMethods:
          - "GET"
          - "POST"
          - "PUT"
          - "DELETE"
        AllowHeaders:
          - "Content-Type"
        MaxAge: 600
      GatewayResponses:
        DEFAULT_4XX:
          StatusCode: 400
          ResponseHeaders:
            Access-Control-Allow-Origin: "*"
        DEFAULT_5XX:
          StatusCode: 500
          ResponseHeaders:
            Access-Control-Allow-Origin: "*"

  ReactAppBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: weeklytefillahfrontend
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - "*"
            AllowedMethods:
              - GET
            AllowedHeaders:
              - "*"

  ReactAppBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ReactAppBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "s3:GetObject"
            Resource: !Sub "${ReactAppBucket.Arn}/*"
            Principal: "*"
          
  ReactAppDeployment:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./frontend/build
      Handler: index.handler
      Runtime: nodejs18.x
      Policies:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: "index.html"
        Origins:
          - Id: "ReactAppS3Origin"
            DomainName: !GetAtt ReactAppBucket.DomainName
            CustomOriginConfig:
              OriginProtocolPolicy: "https-only"
          - Id: "ApiGatewayOrigin"
            DomainName: !Sub "${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com"
            OriginPath: "/Prod"
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: "https-only"
        CacheBehaviors:
          - PathPattern: "/api/*"
            TargetOriginId: "ApiGatewayOrigin"
            AllowedMethods:
              - "HEAD"
              - "GET"
              - "POST"
              - "PUT"
              - "PATCH"
              - "DELETE"
              - "OPTIONS"
            CachedMethods:
              - "HEAD"
              - "GET"
            ViewerProtocolPolicy: "https-only"
            Compress: true
            CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6" 
        DefaultCacheBehavior:
          TargetOriginId: "ReactAppS3Origin"
          AllowedMethods:
            - "HEAD"
            - "GET"
            - "OPTIONS"
          CachedMethods:
            - "HEAD"
            - "GET"
          ViewerProtocolPolicy: "https-only"
          Compress: true
          CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6" # CachingOptimized
        PriceClass: "PriceClass_All"
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
          MinimumProtocolVersion: "TLSv1.2_2018"
        CustomErrorResponses:
          - ErrorCode: 403
            ResponsePagePath: "/index.html"
            ResponseCode: 200
            ErrorCachingMinTTL: 10


Outputs:
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
